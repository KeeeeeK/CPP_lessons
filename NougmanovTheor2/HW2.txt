0. Повторите и перечислите какие типы памяти в С есть, как и когда на них выделяются переменные, их время жизни.

Память может быть автоматической, статической, внешней и регистровой. Также бывает динаическая память. Это, например, память, выделяемая на куче.
...Автоматически выделенная память располагается на стеке. Живёт, пока жив блок, в котором она объявлена. Все переменные, определённые внутри функции по умолчанию являются автоматическими.
...Статические переменные (со словом static) видны внутри функции, в которой объявлены и существуют всё время жизни программы, а их значение сохранится между вызовами функции.
...Внешняя память на то и внешняя, что видна отовсюду, даже если там не определена. (можно указать через extern или вне main)
...Часто используемые небольшие переменные можно явным образом забросить на регистр.


1.Какие способы управления областями видимости в языке С вы знаете?

...Глобальная - видна всюду в исполняемом файле 
...Локальная - видна внутри функции
(Если что-то локальное надо перенести - используем указатель.


2. Какие способы управления областями видимости в языке С++ вы знаете? Что такое namespace?

В дополнение к уже существующим в c++ добавили области видимости для классов.
Пространство имён - некоторое множество, под которым подразумевается модель, абстрактное хранилище или окружение, созданное для логической группировки уникальных идентификаторов (то есть имён).
Пространство имён определяется блоком инструкций:
namespace foo {
int bar;
}
При использовании using namespace foo; пространство имён автоматически подключится к уже используемому пространству.


3.Для чего нужны ключевые слова public: и private:?

Для управления этими самыми областями видимостями.
Есть public, protected, private поля классов. Публичные поля доступны всем (и наследникам в том числе). Защищённые поля доступны лишь при наследовании. private поля доступны лишь самому классу. Друзьям позволено всё.


4.Что особенного в конструкторе и деструкторе класса, что их отличает от других методов.

По крайней мере конструктор и деструктор должны существовать всегда - хотя бы дефолтные. Они всегда публичны. Деструктор должен существовать только один. Тип возвращаемого значения конструктора не указываются.


5. Для чего нужны операторы new и delete?

Для выделения и освобождения памяти. Это очень умные операторы. New кидает исключения в случае нехватки памяти. Похожи на malloc и free. Но работают с объектами, а не с указателями.


6. Что такое и для чего нужен указатель this?

Объявленный класс где-то хранится. Для указания этого места в памяти и есть указатель this. Он доступен для всех методов класса. Это скрытый константный указатель.


7. что такое std::cout и std::cin?

Объекты класса ostream. Служат для ввода (std::cin) и вывода (std::cout) из консоли в консоль.