0. Что такое сигнатура функции? Привести пример одинаковых и различных сигрантур.

Сигнатура функции - характер входных параметров + название. В характер входит  количество аргументов и их типы. Грубо говоря - это параметры, по которым компилятор будет понимать, какую функцию вызывать. Поэтому одинаковые сигнатуры функций применённые к одной и той же (узкой) области видимости запрещены.
Одинаковыми будут являться:
int f(int x, int y);
void f(int x, int y);
Различными будут:
int f(int x, int y);
int f(int x, int* y);


1. Что такое полиморфизм?

Полиморфизм - парадигма программирования, при которой соблюдается прицип многозначности функций с одним названием. Так, например, вообще орех можно порезать (slice), но кокос нужно резать совершенно по-другому. Хотя функция та же. Чтобы порезать произвольный орех - хорошо бы вообще просто писать "slice". Так и делается - наследники могут переопределять для себя методы родителя. Компилятор посмотрит на функции класса и, если не найдёт нужной сигнатуры, будет искать её в предке. И так далее.
Это был пример с переопределением в классах.
Очень интуитивно понятным также становится, например функция создания массива целых чисел. "range". В зависимости от количества параметров она имеет схожее поведение, но немного различную реализацию.


2. Что такое перегрузка функций в языке C++? Какие способы перегрузить фукнции вы знаете, привести пример.

Уже описано в предыдущем пункте.
Пример:
int* range(uint end);
int* range(int begin, int end);


3. Как работают аргументы по умолчанию.

Указываются последними в списке аргументов. Если пользователь не ввёл значения данных параметров - применяются аргументы по умолчанию.

draw(colour = blue);

4.Что такое шаблон функции, для чего он нужен, что его отличает от настоящей функции? Какие ограничения есть у шаблонов?

Шаблон функции - не функция. Это правило по построению данной функции в зависимости от введённых параметров. Отчасти заменяет свободную типизацию (работа с любым типом аргумента) на шаблонную работу (работа для каждого типа аргумента). 
Пример:
template <typename T>
void swop (T* a, T* b);
Ограничение есть лишь в том, что вызываемые для нашего типа функции должны быть определены.


5. Что такое явная специализация шаблонов, как она работает? Привести пример. Чем отличается от обычного шаблона?

Если есть некоторое общее поведение, но для конкретного типа нужно нечто большее - нужно специализировать шаблон под данный тип. То есть вообще есть общее правило, но в некоторых случаях нужно работать по-особенному. Пример из Прата:

struct job 
{
	char name [40];
	double salary ;
	int floor;
}; 

void swop (job &, job &);

template  <typename T>
void swop (T &, T &);

template <>
void swap <job> (job &, job &);


6.Что такое ссылка в языке С++?
Для того, чтобы не передавать указатели, а потом сразу их разыменовывать в начале работы функции придумали ссылки. То есть перечисленные действия делаются автоматически. (Указатель передался, разыменование --- как будто переменная "образовалась" в области в идимости).


7. Зачем нужно ключевое слово inline?

На этапе компиляции многое оптимизируется. И inline используется, чтобы оптимизировать это ещё больше. Передача переменных, вызов функции, возврат из функции - это требует времени. И для того, чтобы его сократить, можно поставить перед функцией inline, чтобы код функции просто брал и подставлялся в места, где она вызывается.


8. Ключевые слова auto и decltype. Для чего нужны? Привести пример использования.
Плюшки высокоуровневости. auto используется для автоматического определения типа. Так, например, результат функции суммы зависит от того, что хотите вы складывать: строки, числа или страшные классы, незамкнутые относительно сложения. Поэтому понять это надо после того, как посчитаешь результат. Простой пример:
int a = 0;
auto c = a;
decltype(ы) - выдаёт тип переменной "ы". Это может быть полезно, особенно, если "ы" была получена как результат функции, выход которой был auto. А нужно создать переменную того же типа.
